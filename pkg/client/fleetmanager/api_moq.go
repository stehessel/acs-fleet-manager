// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fleetmanager

import (
	"context"
	admin "github.com/stackrox/acs-fleet-manager/pkg/api/admin/private"
	"github.com/stackrox/acs-fleet-manager/pkg/api/private"
	"github.com/stackrox/acs-fleet-manager/pkg/api/public"
	"net/http"
	"sync"
)

// Ensure, that PublicAPIMock does implement PublicAPI.
// If this is not the case, regenerate this file with moq.
var _ PublicAPI = &PublicAPIMock{}

// PublicAPIMock is a mock implementation of PublicAPI.
//
//	func TestSomethingThatUsesPublicAPI(t *testing.T) {
//
//		// make and configure a mocked PublicAPI
//		mockedPublicAPI := &PublicAPIMock{
//			CreateCentralFunc: func(ctx context.Context, async bool, request public.CentralRequestPayload) (public.CentralRequest, *http.Response, error) {
//				panic("mock out the CreateCentral method")
//			},
//			DeleteCentralByIdFunc: func(ctx context.Context, id string, async bool) (*http.Response, error) {
//				panic("mock out the DeleteCentralById method")
//			},
//			GetCentralByIdFunc: func(ctx context.Context, id string) (public.CentralRequest, *http.Response, error) {
//				panic("mock out the GetCentralById method")
//			},
//			GetCentralsFunc: func(ctx context.Context, localVarOptionals *public.GetCentralsOpts) (public.CentralRequestList, *http.Response, error) {
//				panic("mock out the GetCentrals method")
//			},
//		}
//
//		// use mockedPublicAPI in code that requires PublicAPI
//		// and then make assertions.
//
//	}
type PublicAPIMock struct {
	// CreateCentralFunc mocks the CreateCentral method.
	CreateCentralFunc func(ctx context.Context, async bool, request public.CentralRequestPayload) (public.CentralRequest, *http.Response, error)

	// DeleteCentralByIdFunc mocks the DeleteCentralById method.
	DeleteCentralByIdFunc func(ctx context.Context, id string, async bool) (*http.Response, error)

	// GetCentralByIdFunc mocks the GetCentralById method.
	GetCentralByIdFunc func(ctx context.Context, id string) (public.CentralRequest, *http.Response, error)

	// GetCentralsFunc mocks the GetCentrals method.
	GetCentralsFunc func(ctx context.Context, localVarOptionals *public.GetCentralsOpts) (public.CentralRequestList, *http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateCentral holds details about calls to the CreateCentral method.
		CreateCentral []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Async is the async argument value.
			Async bool
			// Request is the request argument value.
			Request public.CentralRequestPayload
		}
		// DeleteCentralById holds details about calls to the DeleteCentralById method.
		DeleteCentralById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Async is the async argument value.
			Async bool
		}
		// GetCentralById holds details about calls to the GetCentralById method.
		GetCentralById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetCentrals holds details about calls to the GetCentrals method.
		GetCentrals []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// LocalVarOptionals is the localVarOptionals argument value.
			LocalVarOptionals *public.GetCentralsOpts
		}
	}
	lockCreateCentral     sync.RWMutex
	lockDeleteCentralById sync.RWMutex
	lockGetCentralById    sync.RWMutex
	lockGetCentrals       sync.RWMutex
}

// CreateCentral calls CreateCentralFunc.
func (mock *PublicAPIMock) CreateCentral(ctx context.Context, async bool, request public.CentralRequestPayload) (public.CentralRequest, *http.Response, error) {
	if mock.CreateCentralFunc == nil {
		panic("PublicAPIMock.CreateCentralFunc: method is nil but PublicAPI.CreateCentral was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Async   bool
		Request public.CentralRequestPayload
	}{
		Ctx:     ctx,
		Async:   async,
		Request: request,
	}
	mock.lockCreateCentral.Lock()
	mock.calls.CreateCentral = append(mock.calls.CreateCentral, callInfo)
	mock.lockCreateCentral.Unlock()
	return mock.CreateCentralFunc(ctx, async, request)
}

// CreateCentralCalls gets all the calls that were made to CreateCentral.
// Check the length with:
//
//	len(mockedPublicAPI.CreateCentralCalls())
func (mock *PublicAPIMock) CreateCentralCalls() []struct {
	Ctx     context.Context
	Async   bool
	Request public.CentralRequestPayload
} {
	var calls []struct {
		Ctx     context.Context
		Async   bool
		Request public.CentralRequestPayload
	}
	mock.lockCreateCentral.RLock()
	calls = mock.calls.CreateCentral
	mock.lockCreateCentral.RUnlock()
	return calls
}

// DeleteCentralById calls DeleteCentralByIdFunc.
func (mock *PublicAPIMock) DeleteCentralById(ctx context.Context, id string, async bool) (*http.Response, error) {
	if mock.DeleteCentralByIdFunc == nil {
		panic("PublicAPIMock.DeleteCentralByIdFunc: method is nil but PublicAPI.DeleteCentralById was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    string
		Async bool
	}{
		Ctx:   ctx,
		ID:    id,
		Async: async,
	}
	mock.lockDeleteCentralById.Lock()
	mock.calls.DeleteCentralById = append(mock.calls.DeleteCentralById, callInfo)
	mock.lockDeleteCentralById.Unlock()
	return mock.DeleteCentralByIdFunc(ctx, id, async)
}

// DeleteCentralByIdCalls gets all the calls that were made to DeleteCentralById.
// Check the length with:
//
//	len(mockedPublicAPI.DeleteCentralByIdCalls())
func (mock *PublicAPIMock) DeleteCentralByIdCalls() []struct {
	Ctx   context.Context
	ID    string
	Async bool
} {
	var calls []struct {
		Ctx   context.Context
		ID    string
		Async bool
	}
	mock.lockDeleteCentralById.RLock()
	calls = mock.calls.DeleteCentralById
	mock.lockDeleteCentralById.RUnlock()
	return calls
}

// GetCentralById calls GetCentralByIdFunc.
func (mock *PublicAPIMock) GetCentralById(ctx context.Context, id string) (public.CentralRequest, *http.Response, error) {
	if mock.GetCentralByIdFunc == nil {
		panic("PublicAPIMock.GetCentralByIdFunc: method is nil but PublicAPI.GetCentralById was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetCentralById.Lock()
	mock.calls.GetCentralById = append(mock.calls.GetCentralById, callInfo)
	mock.lockGetCentralById.Unlock()
	return mock.GetCentralByIdFunc(ctx, id)
}

// GetCentralByIdCalls gets all the calls that were made to GetCentralById.
// Check the length with:
//
//	len(mockedPublicAPI.GetCentralByIdCalls())
func (mock *PublicAPIMock) GetCentralByIdCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetCentralById.RLock()
	calls = mock.calls.GetCentralById
	mock.lockGetCentralById.RUnlock()
	return calls
}

// GetCentrals calls GetCentralsFunc.
func (mock *PublicAPIMock) GetCentrals(ctx context.Context, localVarOptionals *public.GetCentralsOpts) (public.CentralRequestList, *http.Response, error) {
	if mock.GetCentralsFunc == nil {
		panic("PublicAPIMock.GetCentralsFunc: method is nil but PublicAPI.GetCentrals was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		LocalVarOptionals *public.GetCentralsOpts
	}{
		Ctx:               ctx,
		LocalVarOptionals: localVarOptionals,
	}
	mock.lockGetCentrals.Lock()
	mock.calls.GetCentrals = append(mock.calls.GetCentrals, callInfo)
	mock.lockGetCentrals.Unlock()
	return mock.GetCentralsFunc(ctx, localVarOptionals)
}

// GetCentralsCalls gets all the calls that were made to GetCentrals.
// Check the length with:
//
//	len(mockedPublicAPI.GetCentralsCalls())
func (mock *PublicAPIMock) GetCentralsCalls() []struct {
	Ctx               context.Context
	LocalVarOptionals *public.GetCentralsOpts
} {
	var calls []struct {
		Ctx               context.Context
		LocalVarOptionals *public.GetCentralsOpts
	}
	mock.lockGetCentrals.RLock()
	calls = mock.calls.GetCentrals
	mock.lockGetCentrals.RUnlock()
	return calls
}

// Ensure, that PrivateAPIMock does implement PrivateAPI.
// If this is not the case, regenerate this file with moq.
var _ PrivateAPI = &PrivateAPIMock{}

// PrivateAPIMock is a mock implementation of PrivateAPI.
//
//	func TestSomethingThatUsesPrivateAPI(t *testing.T) {
//
//		// make and configure a mocked PrivateAPI
//		mockedPrivateAPI := &PrivateAPIMock{
//			GetCentralsFunc: func(ctx context.Context, id string) (private.ManagedCentralList, *http.Response, error) {
//				panic("mock out the GetCentrals method")
//			},
//			GetDataPlaneClusterAgentConfigFunc: func(ctx context.Context, id string) (private.DataplaneClusterAgentConfig, *http.Response, error) {
//				panic("mock out the GetDataPlaneClusterAgentConfig method")
//			},
//			UpdateCentralClusterStatusFunc: func(ctx context.Context, id string, requestBody map[string]private.DataPlaneCentralStatus) (*http.Response, error) {
//				panic("mock out the UpdateCentralClusterStatus method")
//			},
//		}
//
//		// use mockedPrivateAPI in code that requires PrivateAPI
//		// and then make assertions.
//
//	}
type PrivateAPIMock struct {
	// GetCentralsFunc mocks the GetCentrals method.
	GetCentralsFunc func(ctx context.Context, id string) (private.ManagedCentralList, *http.Response, error)

	// GetDataPlaneClusterAgentConfigFunc mocks the GetDataPlaneClusterAgentConfig method.
	GetDataPlaneClusterAgentConfigFunc func(ctx context.Context, id string) (private.DataplaneClusterAgentConfig, *http.Response, error)

	// UpdateCentralClusterStatusFunc mocks the UpdateCentralClusterStatus method.
	UpdateCentralClusterStatusFunc func(ctx context.Context, id string, requestBody map[string]private.DataPlaneCentralStatus) (*http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetCentrals holds details about calls to the GetCentrals method.
		GetCentrals []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetDataPlaneClusterAgentConfig holds details about calls to the GetDataPlaneClusterAgentConfig method.
		GetDataPlaneClusterAgentConfig []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// UpdateCentralClusterStatus holds details about calls to the UpdateCentralClusterStatus method.
		UpdateCentralClusterStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// RequestBody is the requestBody argument value.
			RequestBody map[string]private.DataPlaneCentralStatus
		}
	}
	lockGetCentrals                    sync.RWMutex
	lockGetDataPlaneClusterAgentConfig sync.RWMutex
	lockUpdateCentralClusterStatus     sync.RWMutex
}

// GetCentrals calls GetCentralsFunc.
func (mock *PrivateAPIMock) GetCentrals(ctx context.Context, id string) (private.ManagedCentralList, *http.Response, error) {
	if mock.GetCentralsFunc == nil {
		panic("PrivateAPIMock.GetCentralsFunc: method is nil but PrivateAPI.GetCentrals was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetCentrals.Lock()
	mock.calls.GetCentrals = append(mock.calls.GetCentrals, callInfo)
	mock.lockGetCentrals.Unlock()
	return mock.GetCentralsFunc(ctx, id)
}

// GetCentralsCalls gets all the calls that were made to GetCentrals.
// Check the length with:
//
//	len(mockedPrivateAPI.GetCentralsCalls())
func (mock *PrivateAPIMock) GetCentralsCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetCentrals.RLock()
	calls = mock.calls.GetCentrals
	mock.lockGetCentrals.RUnlock()
	return calls
}

// GetDataPlaneClusterAgentConfig calls GetDataPlaneClusterAgentConfigFunc.
func (mock *PrivateAPIMock) GetDataPlaneClusterAgentConfig(ctx context.Context, id string) (private.DataplaneClusterAgentConfig, *http.Response, error) {
	if mock.GetDataPlaneClusterAgentConfigFunc == nil {
		panic("PrivateAPIMock.GetDataPlaneClusterAgentConfigFunc: method is nil but PrivateAPI.GetDataPlaneClusterAgentConfig was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetDataPlaneClusterAgentConfig.Lock()
	mock.calls.GetDataPlaneClusterAgentConfig = append(mock.calls.GetDataPlaneClusterAgentConfig, callInfo)
	mock.lockGetDataPlaneClusterAgentConfig.Unlock()
	return mock.GetDataPlaneClusterAgentConfigFunc(ctx, id)
}

// GetDataPlaneClusterAgentConfigCalls gets all the calls that were made to GetDataPlaneClusterAgentConfig.
// Check the length with:
//
//	len(mockedPrivateAPI.GetDataPlaneClusterAgentConfigCalls())
func (mock *PrivateAPIMock) GetDataPlaneClusterAgentConfigCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetDataPlaneClusterAgentConfig.RLock()
	calls = mock.calls.GetDataPlaneClusterAgentConfig
	mock.lockGetDataPlaneClusterAgentConfig.RUnlock()
	return calls
}

// UpdateCentralClusterStatus calls UpdateCentralClusterStatusFunc.
func (mock *PrivateAPIMock) UpdateCentralClusterStatus(ctx context.Context, id string, requestBody map[string]private.DataPlaneCentralStatus) (*http.Response, error) {
	if mock.UpdateCentralClusterStatusFunc == nil {
		panic("PrivateAPIMock.UpdateCentralClusterStatusFunc: method is nil but PrivateAPI.UpdateCentralClusterStatus was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ID          string
		RequestBody map[string]private.DataPlaneCentralStatus
	}{
		Ctx:         ctx,
		ID:          id,
		RequestBody: requestBody,
	}
	mock.lockUpdateCentralClusterStatus.Lock()
	mock.calls.UpdateCentralClusterStatus = append(mock.calls.UpdateCentralClusterStatus, callInfo)
	mock.lockUpdateCentralClusterStatus.Unlock()
	return mock.UpdateCentralClusterStatusFunc(ctx, id, requestBody)
}

// UpdateCentralClusterStatusCalls gets all the calls that were made to UpdateCentralClusterStatus.
// Check the length with:
//
//	len(mockedPrivateAPI.UpdateCentralClusterStatusCalls())
func (mock *PrivateAPIMock) UpdateCentralClusterStatusCalls() []struct {
	Ctx         context.Context
	ID          string
	RequestBody map[string]private.DataPlaneCentralStatus
} {
	var calls []struct {
		Ctx         context.Context
		ID          string
		RequestBody map[string]private.DataPlaneCentralStatus
	}
	mock.lockUpdateCentralClusterStatus.RLock()
	calls = mock.calls.UpdateCentralClusterStatus
	mock.lockUpdateCentralClusterStatus.RUnlock()
	return calls
}

// Ensure, that AdminAPIMock does implement AdminAPI.
// If this is not the case, regenerate this file with moq.
var _ AdminAPI = &AdminAPIMock{}

// AdminAPIMock is a mock implementation of AdminAPI.
//
//	func TestSomethingThatUsesAdminAPI(t *testing.T) {
//
//		// make and configure a mocked AdminAPI
//		mockedAdminAPI := &AdminAPIMock{
//			CreateCentralFunc: func(ctx context.Context, async bool, centralRequestPayload admin.CentralRequestPayload) (admin.CentralRequest, *http.Response, error) {
//				panic("mock out the CreateCentral method")
//			},
//			DeleteDbCentralByIdFunc: func(ctx context.Context, id string) (*http.Response, error) {
//				panic("mock out the DeleteDbCentralById method")
//			},
//			GetCentralsFunc: func(ctx context.Context, localVarOptionals *admin.GetCentralsOpts) (admin.CentralList, *http.Response, error) {
//				panic("mock out the GetCentrals method")
//			},
//			UpdateCentralByIdFunc: func(ctx context.Context, id string, centralUpdateRequest admin.CentralUpdateRequest) (admin.Central, *http.Response, error) {
//				panic("mock out the UpdateCentralById method")
//			},
//		}
//
//		// use mockedAdminAPI in code that requires AdminAPI
//		// and then make assertions.
//
//	}
type AdminAPIMock struct {
	// CreateCentralFunc mocks the CreateCentral method.
	CreateCentralFunc func(ctx context.Context, async bool, centralRequestPayload admin.CentralRequestPayload) (admin.CentralRequest, *http.Response, error)

	// DeleteDbCentralByIdFunc mocks the DeleteDbCentralById method.
	DeleteDbCentralByIdFunc func(ctx context.Context, id string) (*http.Response, error)

	// GetCentralsFunc mocks the GetCentrals method.
	GetCentralsFunc func(ctx context.Context, localVarOptionals *admin.GetCentralsOpts) (admin.CentralList, *http.Response, error)

	// UpdateCentralByIdFunc mocks the UpdateCentralById method.
	UpdateCentralByIdFunc func(ctx context.Context, id string, centralUpdateRequest admin.CentralUpdateRequest) (admin.Central, *http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateCentral holds details about calls to the CreateCentral method.
		CreateCentral []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Async is the async argument value.
			Async bool
			// CentralRequestPayload is the centralRequestPayload argument value.
			CentralRequestPayload admin.CentralRequestPayload
		}
		// DeleteDbCentralById holds details about calls to the DeleteDbCentralById method.
		DeleteDbCentralById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetCentrals holds details about calls to the GetCentrals method.
		GetCentrals []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// LocalVarOptionals is the localVarOptionals argument value.
			LocalVarOptionals *admin.GetCentralsOpts
		}
		// UpdateCentralById holds details about calls to the UpdateCentralById method.
		UpdateCentralById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// CentralUpdateRequest is the centralUpdateRequest argument value.
			CentralUpdateRequest admin.CentralUpdateRequest
		}
	}
	lockCreateCentral       sync.RWMutex
	lockDeleteDbCentralById sync.RWMutex
	lockGetCentrals         sync.RWMutex
	lockUpdateCentralById   sync.RWMutex
}

// CreateCentral calls CreateCentralFunc.
func (mock *AdminAPIMock) CreateCentral(ctx context.Context, async bool, centralRequestPayload admin.CentralRequestPayload) (admin.CentralRequest, *http.Response, error) {
	if mock.CreateCentralFunc == nil {
		panic("AdminAPIMock.CreateCentralFunc: method is nil but AdminAPI.CreateCentral was just called")
	}
	callInfo := struct {
		Ctx                   context.Context
		Async                 bool
		CentralRequestPayload admin.CentralRequestPayload
	}{
		Ctx:                   ctx,
		Async:                 async,
		CentralRequestPayload: centralRequestPayload,
	}
	mock.lockCreateCentral.Lock()
	mock.calls.CreateCentral = append(mock.calls.CreateCentral, callInfo)
	mock.lockCreateCentral.Unlock()
	return mock.CreateCentralFunc(ctx, async, centralRequestPayload)
}

// CreateCentralCalls gets all the calls that were made to CreateCentral.
// Check the length with:
//
//	len(mockedAdminAPI.CreateCentralCalls())
func (mock *AdminAPIMock) CreateCentralCalls() []struct {
	Ctx                   context.Context
	Async                 bool
	CentralRequestPayload admin.CentralRequestPayload
} {
	var calls []struct {
		Ctx                   context.Context
		Async                 bool
		CentralRequestPayload admin.CentralRequestPayload
	}
	mock.lockCreateCentral.RLock()
	calls = mock.calls.CreateCentral
	mock.lockCreateCentral.RUnlock()
	return calls
}

// DeleteDbCentralById calls DeleteDbCentralByIdFunc.
func (mock *AdminAPIMock) DeleteDbCentralById(ctx context.Context, id string) (*http.Response, error) {
	if mock.DeleteDbCentralByIdFunc == nil {
		panic("AdminAPIMock.DeleteDbCentralByIdFunc: method is nil but AdminAPI.DeleteDbCentralById was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteDbCentralById.Lock()
	mock.calls.DeleteDbCentralById = append(mock.calls.DeleteDbCentralById, callInfo)
	mock.lockDeleteDbCentralById.Unlock()
	return mock.DeleteDbCentralByIdFunc(ctx, id)
}

// DeleteDbCentralByIdCalls gets all the calls that were made to DeleteDbCentralById.
// Check the length with:
//
//	len(mockedAdminAPI.DeleteDbCentralByIdCalls())
func (mock *AdminAPIMock) DeleteDbCentralByIdCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDeleteDbCentralById.RLock()
	calls = mock.calls.DeleteDbCentralById
	mock.lockDeleteDbCentralById.RUnlock()
	return calls
}

// GetCentrals calls GetCentralsFunc.
func (mock *AdminAPIMock) GetCentrals(ctx context.Context, localVarOptionals *admin.GetCentralsOpts) (admin.CentralList, *http.Response, error) {
	if mock.GetCentralsFunc == nil {
		panic("AdminAPIMock.GetCentralsFunc: method is nil but AdminAPI.GetCentrals was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		LocalVarOptionals *admin.GetCentralsOpts
	}{
		Ctx:               ctx,
		LocalVarOptionals: localVarOptionals,
	}
	mock.lockGetCentrals.Lock()
	mock.calls.GetCentrals = append(mock.calls.GetCentrals, callInfo)
	mock.lockGetCentrals.Unlock()
	return mock.GetCentralsFunc(ctx, localVarOptionals)
}

// GetCentralsCalls gets all the calls that were made to GetCentrals.
// Check the length with:
//
//	len(mockedAdminAPI.GetCentralsCalls())
func (mock *AdminAPIMock) GetCentralsCalls() []struct {
	Ctx               context.Context
	LocalVarOptionals *admin.GetCentralsOpts
} {
	var calls []struct {
		Ctx               context.Context
		LocalVarOptionals *admin.GetCentralsOpts
	}
	mock.lockGetCentrals.RLock()
	calls = mock.calls.GetCentrals
	mock.lockGetCentrals.RUnlock()
	return calls
}

// UpdateCentralById calls UpdateCentralByIdFunc.
func (mock *AdminAPIMock) UpdateCentralById(ctx context.Context, id string, centralUpdateRequest admin.CentralUpdateRequest) (admin.Central, *http.Response, error) {
	if mock.UpdateCentralByIdFunc == nil {
		panic("AdminAPIMock.UpdateCentralByIdFunc: method is nil but AdminAPI.UpdateCentralById was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		ID                   string
		CentralUpdateRequest admin.CentralUpdateRequest
	}{
		Ctx:                  ctx,
		ID:                   id,
		CentralUpdateRequest: centralUpdateRequest,
	}
	mock.lockUpdateCentralById.Lock()
	mock.calls.UpdateCentralById = append(mock.calls.UpdateCentralById, callInfo)
	mock.lockUpdateCentralById.Unlock()
	return mock.UpdateCentralByIdFunc(ctx, id, centralUpdateRequest)
}

// UpdateCentralByIdCalls gets all the calls that were made to UpdateCentralById.
// Check the length with:
//
//	len(mockedAdminAPI.UpdateCentralByIdCalls())
func (mock *AdminAPIMock) UpdateCentralByIdCalls() []struct {
	Ctx                  context.Context
	ID                   string
	CentralUpdateRequest admin.CentralUpdateRequest
} {
	var calls []struct {
		Ctx                  context.Context
		ID                   string
		CentralUpdateRequest admin.CentralUpdateRequest
	}
	mock.lockUpdateCentralById.RLock()
	calls = mock.calls.UpdateCentralById
	mock.lockUpdateCentralById.RUnlock()
	return calls
}
